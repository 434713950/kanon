<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--导入属性配置-->
    <properties resource="generator.properties"></properties>

    <!--指定特定数据库的jdbc驱动jar包的位置-->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <context id="default" targetRuntime="MyBatis3">

        <plugin type="com.github.kanon.generate.plugin.KanonClientPlusPlugin">
            <property name="service.targetPackage" value="${service.targetPackage}"/>
            <property name="service.targetProject" value="${service.targetProject}"/>
            <property name="service.need.generated" value="${service.need.generated}"/>

            <property name="controller.targetPackage" value="${controller.targetPackage}"/>
            <property name="controller.targetProject" value="${controller.targetProject}"/>
            <property name="controller.need.generated" value="${controller.need.generated}"/>
        </plugin>

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator type="com.github.kanon.generate.comment.KanonCommentGenerator"/>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.userId}"
                password="${jdbc.password}">
        </jdbcConnection>


        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径
        -->
        <javaModelGenerator targetPackage="${javaModelGenerator.targetPackage}"
                            targetProject="${javaModelGenerator.targetProject}">

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="true"/>
        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="${sqlMapGenerator.targetPackage}"
                         targetProject="${sqlMapGenerator.targetProject}">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
                type="KANON",生成KANON项目相关的对象文件
        -->
        <javaClientGenerator targetPackage="${javaClientGenerator.targetPackage}"
                             targetProject="${javaClientGenerator.targetProject}" type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
            <!--配合type KANON使用,指定mapper继承的父类-->
            <property name="mapperSuperClass" value="com.baomidou.mybatisplus.mapper.BaseMapper"/>
        </javaClientGenerator>

        <!--tableName:指定了表名
            domainObjectName:指定了实体类的名称
        -->
        <table tableName="sys_p_m_menu_operate" domainObjectName="PMenuOperation"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false" enableInsert="false">
        </table>
    </context>
</generatorConfiguration>